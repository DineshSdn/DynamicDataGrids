{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/getdata.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"primeng/dialog\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/dropdown\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"primeng/multiselect\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/inputtext\";\nimport * as i10 from \"primeng/inputtextarea\";\nimport * as i11 from \"primeng/accordion\";\nconst _c0 = [\"myButton\"];\nfunction HealthProfileComponent_div_104_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" \\u00A0 \");\n    i0.ɵɵelementStart(1, \"p\", 23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r2.name);\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function HealthProfileComponent_div_104_ng_template_6_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r9.showModal());\n    });\n    i0.ɵɵtext(1, \"Add New\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_th_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const question_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", question_r11.qusetion, \" \");\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_ng_container_12_td_2_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const question_r14 = i0.ɵɵnextContext().$implicit;\n    const answerSet_r12 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", question_r14.answers[answerSet_r12].ans, \" \");\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_ng_container_12_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\")(1, \"ul\", 34);\n    i0.ɵɵtemplate(2, HealthProfileComponent_div_104_ng_template_6_ng_container_12_td_2_li_2_Template, 2, 1, \"li\", 35);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r14 = ctx.$implicit;\n    const answerSet_r12 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", answerSet_r12 < question_r14.answers.length);\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtemplate(2, HealthProfileComponent_div_104_ng_template_6_ng_container_12_td_2_Template, 3, 1, \"td\", 29);\n    i0.ɵɵelementStart(3, \"td\")(4, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function HealthProfileComponent_div_104_ng_template_6_ng_container_12_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const answerSet_r12 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r19.edit_data(answerSet_r12));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function HealthProfileComponent_div_104_ng_template_6_ng_container_12_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const answerSet_r12 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r21.Delete(answerSet_r12));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.result_array);\n  }\n}\nfunction HealthProfileComponent_div_104_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtemplate(1, HealthProfileComponent_div_104_ng_template_6_button_1_Template, 2, 0, \"button\", 25);\n    i0.ɵɵelementStart(2, \"span\", 23);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 26)(5, \"table\", 27)(6, \"thead\")(7, \"tr\");\n    i0.ɵɵtemplate(8, HealthProfileComponent_div_104_ng_template_6_th_8_Template, 2, 1, \"th\", 28);\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Action\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, HealthProfileComponent_div_104_ng_template_6_ng_container_12_Template, 8, 1, \"ng-container\", 29);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.readonly);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.title);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.result_array);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.getMaxAnswers());\n  }\n}\nfunction HealthProfileComponent_div_104_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 18)(2, \"div\", 19)(3, \"p-accordion\")(4, \"p-accordionTab\", 20);\n    i0.ɵɵlistener(\"click\", function HealthProfileComponent_div_104_Template_p_accordionTab_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const item_r2 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.GetGridData(item_r2));\n    });\n    i0.ɵɵtemplate(5, HealthProfileComponent_div_104_ng_template_5_Template, 3, 1, \"ng-template\", 21);\n    i0.ɵɵtemplate(6, HealthProfileComponent_div_104_ng_template_6_Template, 13, 4, \"ng-template\", 22);\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction HealthProfileComponent_div_107_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 37);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_3_div_1_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r33);\n      const item_r24 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.answer[item_r24.id] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r30 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r30.answer[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 38);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_3_div_2_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r37);\n      const item_r24 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.answer[item_r24.id] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r31 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r31.answer[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, HealthProfileComponent_div_107_div_3_div_1_Template, 2, 1, \"div\", 35);\n    i0.ɵɵtemplate(2, HealthProfileComponent_div_107_div_3_div_2_Template, 2, 1, \"div\", 35);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.is_integer_only === true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.is_integer_only === false);\n  }\n}\nfunction HealthProfileComponent_div_107_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 37);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_4_div_1_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r44);\n      const item_r24 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.answer[item_r24.id] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r41 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r41.answer[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_4_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"textarea\", 39);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_4_div_2_Template_textarea_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r48);\n      const item_r24 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r47 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r47.answer[item_r24.id] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r42 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r42.answer[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, HealthProfileComponent_div_107_div_4_div_1_Template, 2, 1, \"div\", 35);\n    i0.ɵɵtemplate(2, HealthProfileComponent_div_107_div_4_div_2_Template, 2, 1, \"div\", 35);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.is_integer_only === true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.is_integer_only === false);\n  }\n}\nfunction HealthProfileComponent_div_107_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r53 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-dropdown\", 40);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_5_Template_p_dropdown_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r53);\n      const item_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r52 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r52.selectedOptions[item_r24.id] = $event);\n    })(\"ngModelChange\", function HealthProfileComponent_div_107_div_5_Template_p_dropdown_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r53);\n      const item_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r55 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r55.onDropdownchange($event, item_r24.id));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", item_r24.options)(\"ngModel\", ctx_r27.selectedOptions[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-multiSelect\", 40);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_6_Template_p_multiSelect_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const item_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r58 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r58.selectedOptions[item_r24.id] = $event);\n    })(\"ngModelChange\", function HealthProfileComponent_div_107_div_6_Template_p_multiSelect_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const item_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r61 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r61.onMultiSelectChange($event, item_r24.id));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext().$implicit;\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", item_r24.options)(\"ngModel\", ctx_r28.selectedOptions[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r65 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 41);\n    i0.ɵɵlistener(\"ngModelChange\", function HealthProfileComponent_div_107_div_7_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r65);\n      const item_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r64 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r64.answer[item_r24.id] = $event);\n    })(\"click\", function HealthProfileComponent_div_107_div_7_Template_input_click_1_listener() {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r67 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r67.answerBody());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r24 = i0.ɵɵnextContext().$implicit;\n    const ctx_r29 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r29.answer[item_r24.id]);\n  }\n}\nfunction HealthProfileComponent_div_107_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r70 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵlistener(\"click\", function HealthProfileComponent_div_107_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r70);\n      const ctx_r69 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r69.answerBody());\n    });\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, HealthProfileComponent_div_107_div_3_Template, 3, 2, \"div\", 35);\n    i0.ɵɵtemplate(4, HealthProfileComponent_div_107_div_4_Template, 3, 2, \"div\", 35);\n    i0.ɵɵtemplate(5, HealthProfileComponent_div_107_div_5_Template, 2, 2, \"div\", 35);\n    i0.ɵɵtemplate(6, HealthProfileComponent_div_107_div_6_Template, 2, 2, \"div\", 35);\n    i0.ɵɵtemplate(7, HealthProfileComponent_div_107_div_7_Template, 2, 1, \"div\", 35);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r24 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r24.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.field_type_name === \"Text\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.field_type_name === \"Textarea\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.field_type_name === \"Dropdown\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.field_type_name === \"Multiselect\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r24.field_type_name === \"Calculated\");\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"50vw\"\n  };\n};\nexport let HealthProfileComponent = /*#__PURE__*/(() => {\n  class HealthProfileComponent {\n    constructor(service) {\n      this.service = service;\n      this.staticOptions = [{\n        label: 'Option 1',\n        value: 'option1'\n      }, {\n        label: 'Option 2',\n        value: 'option2'\n      }, {\n        label: 'Option 3',\n        value: 'option3'\n      }];\n      this.maxAnswers = 0;\n      this.datanew = [];\n      this.displayModal = false;\n      this.answer = [];\n      this.responses = [];\n      this.click_edit = false;\n      this.loading = true;\n      this.formula = [];\n      this.datamodel = [];\n      this.response = [];\n      this.selectedCities1 = 0;\n      this.reseponsedata = [];\n      this.datastatus = true;\n      this.showdetail = false;\n      this.activeTab = 'general';\n      this.grid = 0;\n      this.final_responses = [];\n      this.mainclassview = true;\n      this.multiselect_response = [];\n      this.cities = [];\n      this.selectedOptions = [];\n      this.result_array = [];\n      this.readonly = false;\n    }\n    ngOnInit() {\n      // Code to execute when the component initializes\n      // This method is called once the component is initialized\n      this.cities = [{\n        name: 'New York',\n        id: 1\n      }, {\n        name: 'London',\n        id: 2\n      }, {\n        name: 'Tokyo',\n        id: 3\n      }, {\n        name: 'Paris',\n        id: 4\n      }\n      // Add more cities as needed\n      ];\n\n      this.getbuttondata();\n      this.clickButton();\n      // this.answer[107]=1243;\n    }\n\n    onMultiSelectChange(selectedValues, itemId) {\n      // Convert selected values to a comma-separated string\n      this.answer[itemId] = selectedValues.map(value => value.option).join(',');\n    }\n    onDropdownchange(selectedValue, item) {\n      this.answer[item] = selectedValue.option;\n    }\n    answerBody() {\n      let val1 = 0;\n      let val2 = 0;\n      let ans = 0;\n      for (let i = 0; i < this.datamodel.length; ++i) {\n        val1 = this.answer[this.datamodel[i].calc_field1];\n        if (this.datamodel[i].calc_field1_transformation == \"Squared\") {\n          val1 = val1 * val1;\n        }\n        val2 = this.answer[this.datamodel[i].calc_field2];\n        if (this.datamodel[i].calc_field2_transformation == \"Squared\") {\n          val2 = val2 * val2;\n        }\n        if (this.datamodel[i].mid_operator == \"Plus\") {\n          ans = val1 + val2;\n        } else if (this.datamodel[i].mid_operator == \"Minus\") {\n          ans = val1 - val2;\n        } else if (this.datamodel[i].mid_operator == \"Divide\") {\n          ans = val1 / val2;\n        } else {\n          ans = val1 * val2;\n        }\n        if (this.datamodel[i].enable_post_operator == true) {\n          if (this.datamodel[i].post_operator == \"Plus\") {\n            ans = ans + this.datamodel[i].post_operator_val;\n          } else if (this.datamodel[i].post_operator == \"Minus\") {\n            ans = ans - this.datamodel[i].post_operator_val;\n          } else if (this.datamodel[i].post_operator == \"Divide\") {\n            ans = ans / this.datamodel[i].post_operator_val;\n          } else {\n            ans = ans * this.datamodel[i].post_operator_val;\n          }\n          this.answer[this.datamodel[i].field_id] = ans;\n          console.log(ans);\n          ans = 0;\n          continue;\n        } else {\n          console.log(ans);\n          ans = 0;\n          continue;\n        }\n      }\n      console.log(this.answer);\n    }\n    showModal() {\n      this.answer = [];\n      this.displayModal = true;\n    }\n    closeModal() {\n      this.displayModal = false;\n    }\n    onInputChange(event) {\n      console.log(\"you enterd\" + event);\n    }\n    toggleSelection(questionId, optionValue) {\n      this.multiselect_response.push(optionValue);\n      console.log(this.multiselect_response);\n      return 123;\n    }\n    submit() {\n      if (this.click_edit) {\n        for (let i = 0; i < this.result_array.length; ++i) {\n          const data1 = {\n            responsedto: [{\n              id: this.result_array[i].answers[this.data_for_edit].transactionid,\n              userid: this.result_array[i].answers[this.data_for_edit].userid,\n              gridid: this.result_array[i].answers[this.data_for_edit].grid_id,\n              questionid: this.result_array[i].answers[this.data_for_edit].questionid,\n              question: 'null',\n              response: this.answer[this.result_array[i].answers[this.data_for_edit].questionid].toString(),\n              time: new Date().toISOString() // Assuming you want current timestamp\n            }]\n          };\n\n          this.service.post_response(data1).subscribe({\n            next: Response => {\n              console.log(Response);\n              this.click_edit = false;\n              this.getbuttondata();\n            }\n          });\n        }\n        this.displayModal = false;\n      } else {\n        this.displayModal = false;\n        const multitring = this.multiselect_response.toString();\n        console.log(this.answer);\n        console.log(this.grid);\n        for (var i in this.answer) {\n          let ans = this.answer[i];\n          const data = {\n            responsedto: [{\n              id: 0,\n              userid: 1,\n              gridid: this.grid,\n              questionid: parseInt(i, 10),\n              question: 'null',\n              response: ans.toString(),\n              time: new Date().toISOString() // Assuming you want current timestamp\n            }]\n          };\n\n          this.service.post_response(data).subscribe({\n            next: Response => {\n              console.log(Response);\n              this.getbuttondata();\n            }\n          });\n        }\n      }\n    }\n    onSelectChange(event, id, item) {\n      const selectedValue = event.target.value;\n      console.log(`Dropdown with id ${id} changed to ${selectedValue}`);\n      console.log('Additional item data:', item);\n      // Here you can handle the selected value and the additional data as needed\n    }\n    // use to print the name on button \n    getbuttondata() {\n      this.service.health_profile().subscribe({\n        next: Response => {\n          this.data = Response;\n          console.log(this.data);\n        }\n      });\n    }\n    clickButton() {\n      this.myButton.nativeElement.click();\n    }\n    // giving the questions in based on the grid id\n    // getdetails(id:any)\n    // {\n    //  this.service.getgriddatabyid(id)\n    //  .subscribe({\n    //   next:(Response:any)=>\n    //   {\n    //     this.reseponsedata=Response;\n    //     this.get_response(id);\n    //     console.log(\" reseponsedata=\"+this.reseponsedata);\n    //     if(this.reseponsedata.length==0)\n    //     {\n    //       console.log(\"No data found\")\n    //       this.datastatus=false;\n    //       this.showdetail=true;\n    //     }\n    //     else{\n    //       this.datastatus=true;\n    //       this.showdetail=false;\n    //     }\n    //   }\n    //  });\n    // }\n    openTab(tabName) {\n      this.activeTab = tabName;\n      // You can add additional logic here if needed\n    }\n    // give the complete grid detail\n    // GetGridData1(id:any)\n    //  {\n    //   this.grid=id;\n    //     this.service.getgrid(0,id)\n    //     .subscribe({\n    //       next:(Response:any)=>\n    //       {\n    //         this.response=Response;\n    //       }\n    //     });\n    //  }\n    // give the complete grid detail\n    //  getgriddata(id:any)\n    //  {\n    //     this.service.getgrid(0,id)\n    //     .subscribe({\n    //       next:(Response:any)=>\n    //       {\n    //         this.newresponse=Response;\n    //         this.filteredresponse = this.newresponse;\n    // if(this.newresponse.fields.length==0)\n    // {\n    //   console.log(\"No data found\")\n    //   this.datastatus=false;\n    //   this.showdetail=true;\n    // }\n    // else{\n    //   this.datastatus=true;\n    //   this.showdetail=false;\n    // }\n    //         this.get_response(id);\n    //       }\n    //     });\n    //  }   \n    // the obove commented method is not in use\n    getFormulas(field_id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const response = yield this.service.get_formula(field_id).toPromise();\n          this.datamodel.push(response[response.length - 1]);\n        } catch (error) {\n          console.error(\"Error fetching formula:\", error);\n        }\n        console.log(JSON.stringify(this.datamodel, null, 2) + \" formula_for_calulation\");\n      });\n    }\n    Toget_id(req) {\n      for (let i = 0; i < req.length; ++i) {\n        if (req[i].field_type_name === \"Calculated\") {\n          this.getFormulas(req[i].id);\n        }\n      }\n    }\n    GetGridData(data) {\n      this.grid = data.id;\n      this.grid_type_id = data.type_id;\n      this.title = data.name;\n      this.service.getgrid(0, this.grid).toPromise().then(response => {\n        this.newresponse = response;\n        this.filteredresponse = this.newresponse;\n        this.Toget_id(this.newresponse.fields);\n        if (this.newresponse.fields.length == 0) {\n          console.log(\"No data found\");\n          this.datastatus = false;\n          this.showdetail = true;\n        } else {\n          this.datastatus = true;\n          this.showdetail = false;\n        }\n        const promises = this.filteredresponse.fields.map((item, index) => {\n          if (item.field_type_name === \"Dropdown\" || item.field_type_name === \"Multiselect\") {\n            return this.Options_get_byid(item.id).then(options => {\n              if (!this.filteredresponse.fields[index].options) {\n                this.filteredresponse.fields[index].options = [];\n              }\n              this.filteredresponse.fields[index].options.push(...options); // Assuming `options` is an array\n            }).catch(error => {\n              console.error(\"Error fetching options\", error);\n            });\n          } else {\n            return Promise.resolve();\n          }\n        });\n        this.get_response(this.grid);\n        // After all promises are resolved\n        Promise.all(promises).then(() => {\n          this.sortFieldsByDetailSortOrder();\n          this.sortFieldsBytabularorder();\n        });\n      }).catch(error => {\n        console.error(\"Error fetching grid data\", error);\n      });\n      console.log(this.filteredresponse.fields);\n    }\n    sortFieldsByDetailSortOrder() {\n      throw new Error('Method not implemented.');\n    }\n    sortFieldsBytabularorder() {\n      throw new Error('Method not implemented.');\n    }\n    Options_get_byid(id) {\n      // Return a new Promise\n      return new Promise((resolve, reject) => {\n        // Call the service method\n        this.service.get_option_by_id(id).subscribe({\n          next: response => {\n            // Resolve the promise with the response data\n            resolve(response);\n          },\n          error: err => {\n            // Reject the promise with the error\n            reject(err);\n          }\n        });\n      });\n    }\n    //giving the answer to the question\n    get_response(id) {\n      this.service.get_response(id).subscribe({\n        next: Response => {\n          this.final_responses = Response;\n          this.makeperfect_data();\n          console.log(\"fianal_data \" + this.final_responses);\n        }\n      });\n    }\n    getItemValue(item, heading) {\n      return item[heading.name.toLowerCase()];\n    }\n    makeperfect_data() {\n      this.result_array = [];\n      for (const question of this.newresponse.fields) {\n        const answersForQuestion = [];\n        for (const answer of this.final_responses) {\n          if (answer.questionid === question.id) {\n            answersForQuestion.push({\n              ans: answer.response,\n              time: answer.time,\n              questionid: answer.questionid,\n              transactionid: answer.id,\n              userid: answer.userid,\n              grid_id: answer.gridid\n            });\n          }\n        }\n        this.result_array.push({\n          qusetion: question.name,\n          answers: answersForQuestion\n        });\n      }\n      console.log(this.result_array);\n      // this.result_array = [];\n      // for (const question of this.newresponse.fields) {\n      //   const answersForQuestion: Answer[] = [];\n      //   for (const answer of this.final_responses) {\n      //     if (answer.questionid === question.id) {\n      //       answersForQuestion.push({ answer: answer, time: answer.time });\n      //     }\n      //   }\n      //   this.result_array.push({\n      //     question: question.name,\n      //     answers: answersForQuestion\n      //   });\n      // }\n      // console.log(this.result_array);\n    }\n    // const data: Data1 = {\n    //   questions: []\n    // };\n    // for (const questionData of this.reseponsedata) {\n    //   const question: Question = {\n    //     questionId: questionData.id,\n    //     question: questionData.name,\n    //     answers: []\n    //   };\n    //   for (const response of this.final_responses) {\n    //     if (response.questionid === questionData.id) {\n    //       question.answers.push({\n    //         answer: response.response,\n    //         time: response.time\n    //       });\n    //     }\n    //   }\n    //   data.questions.push(question);\n    // }\n    // console.log(data);\n    // this.data=data;\n    getMaxAnswers() {\n      const maxAnswers = Math.max(...this.result_array.map(item => item.answers.length));\n      return Array.from(Array(maxAnswers).keys());\n    }\n    edit_data(data) {\n      this.click_edit = true;\n      console.log(this.result_array);\n      // this for loop is use to print the value on the form\n      for (let i = 0; i < this.result_array.length; ++i) {\n        this.answer[this.result_array[i].answers[data].questionid] = this.result_array[i].answers[data].ans;\n      }\n      console.log(this.answer);\n      this.data_for_edit = data;\n      this.displayModal = true;\n      // below code is to post he form \n      //   for(let i=0;i<this.result_array.length;++i)\n      //   {\n      //     // let ans= this.answer[i]\n      //     // this.service.post_response(data)\n      //     // .subscribe({\n      //     //   next:(Response:any)=>\n      //     //   {\n      //     //     console.log(Response);\n      //     //   }\n      //     // });\n      //     const answer=this.result_array[i].answers[data].ans;\n      //     const questionid=this.result_array[i].answers[data].questionid;\n      //     const time=this.result_array[i].answers[data].time;\n      //     const transactionid=this.result_array[i].answers[data].transactionid;\n      //     const userid=this.result_array[i].answers[data].userid;\n      //      const gridid=this.result_array[i].answers[data].grid_id;\n      //     // console.log(\"answer : \"+this.result_array[i].answers[data].ans,\n      //     // \"questionid : \"+this.result_array[i].answers[data].questionid,\n      //     // \"time : \"+this.result_array[i].answers[data].time,\n      //     // \"transactionid : \"+this.result_array[i].answers[data].transactionid,\n      //     // \"userid : \"+this.result_array[i].answers[data].userid );\n      //     const req_data = {\n      //       responsedto: [\n      //         {\n      //           id: transactionid,\n      //           userid: userid,\n      //           gridid: gridid,\n      //           questionid: questionid,\n      //           question: 'null',\n      //           response:answer,\n      //           time: new Date().toISOString() // Assuming you want current timestamp\n      //         }\n      //       ]\n      //     };\n      //     this.service.post_response(req_data)\n      //     .subscribe({\n      //       next:(Response:any)=>\n      //       {\n      //         console.log(Response);\n      //       }\n      //     });\n      //   }\n      console.log(data);\n    }\n    Delete(data) {\n      console.log(data);\n      if (confirm(\"Are you sure want to Delete this Record ?\")) {\n        for (let i = 0; i < this.result_array.length; ++i) {\n          const transactionid = this.result_array[i].answers[data].transactionid;\n          this.service.Delete_response(transactionid).subscribe({\n            next: Response => {\n              console.log(Response.message);\n            }\n          });\n        }\n      }\n    }\n    // method for multiline\n    saveData() {}\n    confirmDialog(data) {\n      return 0;\n    }\n  }\n  HealthProfileComponent.ɵfac = function HealthProfileComponent_Factory(t) {\n    return new (t || HealthProfileComponent)(i0.ɵɵdirectiveInject(i1.GetdataService));\n  };\n  HealthProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HealthProfileComponent,\n    selectors: [[\"app-health-profile\"]],\n    viewQuery: function HealthProfileComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myButton = _t.first);\n      }\n    },\n    decls: 111,\n    vars: 8,\n    consts: [[1, \"container\"], [1, \"detail\"], [1, \"div1\"], [1, \"section\"], [\"pButton\", \"\", \"type\", \"button\"], [1, \"section1\"], [1, \"section2\"], [1, \"section3\"], [1, \"section4\"], [\"id\", \"accordionExample\", 1, \"accordion\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"header\", \"Create New Record\", 3, \"visible\", \"modal\", \"closable\", \"visibleChange\"], [1, \"p-grid\", \"p-dir-col\"], [\"class\", \"name\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-d-flex\", \"p-jc-end\"], [\"pButton\", \"\", \"label\", \"Close\", \"icon\", \"pi pi-times\", 1, \"p-button-secondary\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Submit\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", 3, \"click\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"accordion-wrapper\"], [3, \"click\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"content\"], [1, \"h6\"], [1, \"card-header\"], [\"class\", \"btn btn-primary btn-sm float-right ml-2\", 3, \"click\", 4, \"ngIf\"], [1, \"table-container\"], [1, \"health-profile-table\"], [\"class\", \"question-heading\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", \"float-right\", \"ml-2\", 3, \"click\"], [1, \"question-heading\"], [1, \"btn\", \"btn-primary\", 2, \"margin-right\", \"4%\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"answer-list\"], [4, \"ngIf\"], [1, \"name\", 3, \"click\"], [\"type\", \"number\", \"pInputText\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"pInputText\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"pInputTextarea\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"optionLabel\", \"option\", \"display\", \"chip\", 3, \"options\", \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"pInputText\", \"\", \"disabled\", \"true\", 3, \"ngModel\", \"ngModelChange\", \"click\"]],\n    template: function HealthProfileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\");\n        i0.ɵɵtext(5, \"Test Call Information\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵtext(7, \"\\uD83D\\uDCDE\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵtext(9, \"\\uD83C\\uDFA5\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 4);\n        i0.ɵɵtext(11, \"\\uD83D\\uDCF1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"p\");\n        i0.ɵɵelement(14, \"strong\");\n        i0.ɵɵtext(15, \" View History \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 5)(17, \"p\")(18, \"strong\");\n        i0.ɵɵtext(19, \"EMPI\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \" 1158053668\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\")(22, \"strong\");\n        i0.ɵɵtext(23, \"Member ID:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(24, \" 65444\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"p\")(26, \"strong\");\n        i0.ɵɵtext(27, \"MBI:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(28, \" MBI 11998877\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"p\")(30, \"strong\");\n        i0.ɵɵtext(31, \"DOB\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"p\")(33, \"strong\");\n        i0.ɵɵtext(34, \"DOB:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(35, \" 02/10/2024\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"p\")(37, \"strong\");\n        i0.ɵɵtext(38, \"Gender:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(39, \" Male\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"p\")(41, \"strong\");\n        i0.ɵɵtext(42, \"Priority\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(43, \"p\")(44, \"strong\");\n        i0.ɵɵtext(45, \"RAF:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(46, \" 0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"p\")(48, \"strong\");\n        i0.ɵɵtext(49, \"Notes\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(50, \"p\")(51, \"strong\");\n        i0.ɵɵtext(52, \"sona test:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(53, \" sona test\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(54, \"div\", 6)(55, \"h3\");\n        i0.ɵɵtext(56, \"Cohorts\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"p\")(58, \"strong\");\n        i0.ɵɵtext(59, \"DOB:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(60, \" 02/10/2024\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(61, \"p\")(62, \"strong\");\n        i0.ɵɵtext(63, \"Gender:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(64, \" Male\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(65, \"div\", 7)(66, \"h3\");\n        i0.ɵɵtext(67, \"Attribution\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"p\")(69, \"strong\");\n        i0.ɵɵtext(70, \"Priority:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(71, \" RAF 0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"p\")(73, \"strong\");\n        i0.ɵɵtext(74, \"Notes:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(75, \" sona test sona test\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"p\")(77, \"strong\");\n        i0.ɵɵtext(78, \"Cohorts:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(79, \" Client Project(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"p\")(81, \"strong\");\n        i0.ɵɵtext(82, \"Current Status:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(83, \" Trans Content Project Completed (encounter completed)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(84, \"div\", 8)(85, \"h3\");\n        i0.ɵɵtext(86, \"Communication\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(87, \"p\")(88, \"strong\");\n        i0.ɵɵtext(89, \"Priority:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(90, \" RAF 0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(91, \"p\")(92, \"strong\");\n        i0.ɵɵtext(93, \"Notes:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(94, \" sona test sona test\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(95, \"p\")(96, \"strong\");\n        i0.ɵɵtext(97, \"Cohorts:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(98, \" Client Project(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(99, \"p\")(100, \"strong\");\n        i0.ɵɵtext(101, \"Current Status:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(102, \" Trans Content Project Completed (encounter completed)\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(103, \"div\", 9);\n        i0.ɵɵtemplate(104, HealthProfileComponent_div_104_Template, 7, 0, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(105, \"p-dialog\", 11);\n        i0.ɵɵlistener(\"visibleChange\", function HealthProfileComponent_Template_p_dialog_visibleChange_105_listener($event) {\n          return ctx.displayModal = $event;\n        });\n        i0.ɵɵelementStart(106, \"div\", 12);\n        i0.ɵɵtemplate(107, HealthProfileComponent_div_107_Template, 8, 6, \"div\", 13);\n        i0.ɵɵelementStart(108, \"div\", 14)(109, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function HealthProfileComponent_Template_button_click_109_listener() {\n          return ctx.displayModal = false;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(110, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function HealthProfileComponent_Template_button_click_110_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(104);\n        i0.ɵɵproperty(\"ngForOf\", ctx.data);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(7, _c1));\n        i0.ɵɵproperty(\"visible\", ctx.displayModal)(\"modal\", true)(\"closable\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredresponse == null ? null : ctx.filteredresponse.fields);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.Dialog, i4.PrimeTemplate, i5.Dropdown, i6.DefaultValueAccessor, i6.NumberValueAccessor, i6.NgControlStatus, i6.NgModel, i7.MultiSelect, i8.ButtonDirective, i9.InputText, i10.InputTextarea, i11.Accordion, i11.AccordionTab],\n    styles: [\"body[_ngcontent-%COMP%]{font-family:Arial,sans-serif}.container[_ngcontent-%COMP%]{display:flex;margin-top:3%}.detail[_ngcontent-%COMP%], .accordion[_ngcontent-%COMP%]{flex:1;margin-right:30px}.accordion[_ngcontent-%COMP%]{min-width:90%}.detail[_ngcontent-%COMP%]{flex:2;border:2px solid white}.detail[_ngcontent-%COMP%]{min-width:30%;background-color:#f0f0f0}.section[_ngcontent-%COMP%]{align-items:center;padding-top:4%;padding-bottom:2%;padding-left:6%;background-color:#101dd3;color:#f0f8ff}.section[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{color:#f0f8ff}.section[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#101dd3}.section1[_ngcontent-%COMP%]{text-align:justify;padding:5%;background-color:#f0f0f0}.section2[_ngcontent-%COMP%]{text-align:justify;background-color:#f0f0f0}.section2[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{padding-left:2%;background-color:#dcdcdc;padding-top:2%;padding-bottom:2%}.section2[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{padding-left:5%}.section3[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{padding-left:2%;background-color:#dcdcdc;padding-top:2%;padding-bottom:2%}.section3[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{padding-left:5%}.section4[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{background-color:#dcdcdc;padding-top:2%;padding-bottom:2%;padding-left:2%}.section4[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{padding-left:5%}.section3[_ngcontent-%COMP%], .section4[_ngcontent-%COMP%]{background-color:#f0f0f0}.horizontal-names[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;width:100%}.mainc[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex:1;margin:0}.main2[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{background-color:#f4f4f4;border:1px solid #ddd;margin:0;padding:10px;text-align:center}.abc[_ngcontent-%COMP%]{margin-left:80%;margin-bottom:2%}  .p-dialog .p-dialog-header{background-color:#007ad9;color:#fff}  .p-dialog .p-dialog-content{padding:20px}  .p-dialog .p-dialog-footer{padding:10px 20px;background-color:#f1f1f1;display:flex;justify-content:flex-end}  .p-inputtext,   .p-inputtextarea,   .p-dropdown,   .p-multiselect{width:100%;margin-top:10px;box-sizing:border-box}  .p-dropdown,   .p-multiselect{margin-bottom:10px}  .p-button{margin-left:10px}  .p-button-primary{background-color:#007ad9;border-color:#007ad9}  .p-button-primary:hover{background-color:#005fa3;border-color:#005fa3}  .p-button-secondary{background-color:#f1f1f1;color:#000;border:1px solid #dcdcdc}  .p-button-secondary:hover{background-color:#dcdcdc}  .p-grid.p-dir-col{display:flex;flex-direction:column}  .name{margin-bottom:15px}  .p-d-flex.p-jc-end{justify-content:flex-end}  p{margin:0;font-weight:700}  .p-dialog .p-dropdown,   .p-dialog .p-multiselect,   .p-dialog .p-inputtext,   .p-dialog .p-inputtextarea{margin-bottom:1rem}  .p-dialog{max-width:600px;width:50vw}.table-container[_ngcontent-%COMP%]{margin:20px}.health-profile-table[_ngcontent-%COMP%]{width:100%;border-collapse:collapse}.health-profile-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], .health-profile-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{padding:10px;text-align:left;border:none}.health-profile-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{background-color:#f0f0f0;font-weight:700}.health-profile-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even){background-color:#f9f9f9}.health-profile-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#f0f0f0}.answer-list[_ngcontent-%COMP%]{list-style-type:none;margin:0;padding:0}.answer-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{margin-bottom:5px}\"]\n  });\n  return HealthProfileComponent;\n})();\nfunction onInputChange(event, any) {\n  throw new Error('Function not implemented.');\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}